declare const _default: {
    env: {
        browser: boolean;
        es6: boolean;
        jest: boolean;
    };
    plugins: string[];
    extends: string[];
    parser: string;
    parserOptions: {
        ecmaVersion: number;
        sourceType: string;
        ecmaFeatures: {
            jsx: boolean;
        };
    };
    overrides: {
        files: string[];
        extends: string[];
        parser: string;
        rules: {
            "react/jsx-no-useless-fragment": string;
            "react/no-array-index-key": string;
            "10x/auto-import": (string | {
                imports: {
                    useRef: string;
                    useEffect: string;
                    useState: string;
                    useCallback: string;
                    useMemo: string;
                    useReducer: string;
                    useCurrentFrame: string;
                    useVideoConfig: string;
                    spring: string;
                    measureSpring: string;
                    random: string;
                    interpolate: string;
                    interpolateColors: string;
                    Easing: string;
                    getInputProps: string;
                    continueRender: string;
                    delayRender: string;
                    AbsoluteFill: string;
                    Sequence: string;
                    Composition: string;
                    Audio: string;
                    Video: string;
                    OffthreadVideo: string;
                    Series: string;
                    Still: string;
                    Freeze: string;
                    Loop: string;
                    staticFile: string;
                    Config: string;
                    Img: string;
                    IFrame: string;
                    Folder: string;
                    styled: string;
                };
            })[];
            "@typescript-eslint/explicit-module-boundary-types": string;
            "no-unused-vars": string | (string | {
                vars: string;
                args: string;
                ignoreRestSiblings: boolean;
                argsIgnorePattern: string;
                caughtErrors: string;
                caughtErrorsIgnorePattern: string;
            })[];
            "no-undef": string | (string | {
                typeof: boolean;
            })[];
            "no-shadow"?: string | undefined;
            "@typescript-eslint/no-var-requires"?: string | undefined;
            curly: number;
            "lines-around-comment": number;
            "max-len": number;
            "no-confusing-arrow": number;
            "no-mixed-operators": number;
            "no-tabs": number;
            "no-unexpected-multiline": number;
            quotes: number;
            "@typescript-eslint/quotes": number;
            "babel/quotes": number;
            "array-bracket-newline": string;
            "array-bracket-spacing": string;
            "array-element-newline": string;
            "arrow-parens": string;
            "arrow-spacing": string;
            "block-spacing": string;
            "brace-style": string;
            "comma-dangle": string;
            "comma-spacing": string;
            "comma-style": string;
            "computed-property-spacing": string;
            "dot-location": string;
            "eol-last": string;
            "func-call-spacing": string;
            "function-call-argument-newline": string;
            "function-paren-newline": string;
            "generator-star": string;
            "generator-star-spacing": string;
            "implicit-arrow-linebreak": string;
            indent: string;
            "jsx-quotes": string;
            "key-spacing": string;
            "keyword-spacing": string;
            "linebreak-style": string;
            "multiline-ternary": string;
            "newline-per-chained-call": string;
            "new-parens": string;
            "no-arrow-condition": string;
            "no-comma-dangle": string;
            "no-extra-parens": string;
            "no-extra-semi": string;
            "no-floating-decimal": string;
            "no-mixed-spaces-and-tabs": string;
            "no-multi-spaces": string;
            "no-multiple-empty-lines": string;
            "no-reserved-keys": string;
            "no-space-before-semi": string;
            "no-trailing-spaces": string;
            "no-whitespace-before-property": string;
            "no-wrap-func": string;
            "nonblock-statement-body-position": string;
            "object-curly-newline": string;
            "object-curly-spacing": string;
            "object-property-newline": string;
            "one-var-declaration-per-line": string;
            "operator-linebreak": string;
            "padded-blocks": string;
            "quote-props": string;
            "rest-spread-spacing": string;
            semi: string;
            "semi-spacing": string;
            "semi-style": string;
            "space-after-function-name": string;
            "space-after-keywords": string;
            "space-before-blocks": string;
            "space-before-function-paren": string;
            "space-before-function-parentheses": string;
            "space-before-keywords": string;
            "space-in-brackets": string;
            "space-in-parens": string;
            "space-infix-ops": string;
            "space-return-throw-case": string;
            "space-unary-ops": string;
            "space-unary-word-ops": string;
            "switch-colon-spacing": string;
            "template-curly-spacing": string;
            "template-tag-spacing": string;
            "unicode-bom": string;
            "wrap-iife": string;
            "wrap-regex": string;
            "yield-star-spacing": string;
            "@babel/object-curly-spacing": string;
            "@babel/semi": string;
            "@typescript-eslint/brace-style": string;
            "@typescript-eslint/comma-dangle": string;
            "@typescript-eslint/comma-spacing": string;
            "@typescript-eslint/func-call-spacing": string;
            "@typescript-eslint/indent": string;
            "@typescript-eslint/keyword-spacing": string;
            "@typescript-eslint/member-delimiter-style": string;
            "@typescript-eslint/no-extra-parens": string;
            "@typescript-eslint/no-extra-semi": string;
            "@typescript-eslint/object-curly-spacing": string;
            "@typescript-eslint/semi": string;
            "@typescript-eslint/space-before-function-paren": string;
            "@typescript-eslint/space-infix-ops": string;
            "@typescript-eslint/type-annotation-spacing": string;
            "babel/object-curly-spacing": string;
            "babel/semi": string;
            "flowtype/boolean-style": string;
            "flowtype/delimiter-dangle": string;
            "flowtype/generic-spacing": string;
            "flowtype/object-type-curly-spacing": string;
            "flowtype/object-type-delimiter": string;
            "flowtype/quotes": string;
            "flowtype/semi": string;
            "flowtype/space-after-type-colon": string;
            "flowtype/space-before-generic-bracket": string;
            "flowtype/space-before-type-colon": string;
            "flowtype/union-intersection-spacing": string;
            "react/jsx-child-element-spacing": string;
            "react/jsx-closing-bracket-location": string;
            "react/jsx-closing-tag-location": string;
            "react/jsx-curly-newline": string;
            "react/jsx-curly-spacing": string;
            "react/jsx-equals-spacing": string;
            "react/jsx-first-prop-new-line": string;
            "react/jsx-indent": string;
            "react/jsx-indent-props": string;
            "react/jsx-max-props-per-line": string;
            "react/jsx-newline": string;
            "react/jsx-one-expression-per-line": string;
            "react/jsx-props-no-multi-spaces": string;
            "react/jsx-tag-spacing": string;
            "react/jsx-wrap-multilines": string;
            "for-direction": string;
            "getter-return": string;
            "no-async-promise-executor": string;
            "no-compare-neg-zero": string;
            "no-cond-assign": string;
            "no-constant-condition": string;
            "no-control-regex": string;
            "no-debugger": string;
            "no-dupe-args": string;
            "no-dupe-else-if": string;
            "no-dupe-keys": string;
            "no-duplicate-case": string;
            "no-empty-character-class": string;
            "no-empty": (string | {
                allowEmptyCatch: boolean;
            })[];
            "no-ex-assign": string;
            "no-extra-boolean-cast": string;
            "no-func-assign": string;
            "no-import-assign": string;
            "no-inner-declarations": string;
            "no-invalid-regexp": string;
            "no-irregular-whitespace": string;
            "no-loss-of-precision": string;
            "no-misleading-character-class": string;
            "no-obj-calls": string;
            "no-promise-executor-return": string;
            "no-prototype-builtins": string;
            "no-regex-spaces": string;
            "no-setter-return": string;
            "no-sparse-arrays": string;
            "no-template-curly-in-string": string;
            "no-unreachable": string;
            "no-unreachable-loop": string;
            "no-unsafe-finally": string;
            "no-unsafe-negation": string;
            "no-unsafe-optional-chaining": (string | {
                disallowArithmeticOperators: boolean;
            })[];
            "no-useless-backreference": string;
            "use-isnan": string;
            "valid-typeof": (string | {
                requireStringLiterals: boolean;
            })[];
            "accessor-pairs": (string | {
                enforceForClassMembers: boolean;
            })[];
            "array-callback-return": (string | {
                allowImplicit: boolean;
            })[];
            "block-scoped-var": string;
            complexity: string;
            "default-case": string;
            "default-case-last": string;
            "default-param-last": string;
            "dot-notation": string;
            eqeqeq: string;
            "grouped-accessor-pairs": string[];
            "guard-for-in": string;
            "no-alert": string;
            "no-caller": string;
            "no-case-declarations": string;
            "no-constructor-return": string;
            "no-else-return": (string | {
                allowElseIf: boolean;
            })[];
            "no-empty-pattern": string;
            "no-eq-null": string;
            "no-eval": string;
            "no-extend-native": string;
            "no-extra-bind": string;
            "no-extra-label": string;
            "no-fallthrough": string;
            "no-global-assign": string;
            "no-implicit-coercion": string;
            "no-implicit-globals": string;
            "no-implied-eval": string;
            "no-iterator": string;
            "no-labels": string;
            "no-lone-blocks": string;
            "no-multi-str": string;
            "no-new-func": string;
            "no-new-wrappers": string;
            "no-nonoctal-decimal-escape": string;
            "no-new": string;
            "no-octal-escape": string;
            "no-octal": string;
            "no-proto": string;
            "no-redeclare": string;
            "no-return-assign": string[];
            "no-return-await": string;
            "no-script-url": string;
            "no-self-assign": (string | {
                props: boolean;
            })[];
            "no-self-compare": string;
            "no-sequences": string;
            "no-throw-literal": string;
            "no-unmodified-loop-condition": string;
            "no-unused-labels": string;
            "no-useless-call": string;
            "no-useless-concat": string;
            "no-useless-escape": string;
            "no-useless-return": string;
            "no-void": string;
            "no-warning-comments": string;
            "no-with": string;
            "prefer-promise-reject-errors": (string | {
                allowEmptyReject: boolean;
            })[];
            "prefer-regex-literals": string;
            radix: string;
            yoda: string;
            "no-delete-var": string;
            "no-label-var": string;
            "no-restricted-globals": string[];
            "no-shadow-restricted-names": string;
            "no-undef-init": string;
            "no-buffer-constructor": string;
            "no-restricted-imports": string[];
            camelcase: (string | {
                properties: string;
            })[];
            "capitalized-comments": (string | {
                ignorePattern: string;
                ignoreInlineComments: boolean;
                ignoreConsecutiveComments: boolean;
            })[];
            "func-name-matching": (string | {
                considerPropertyDescriptor: boolean;
            })[];
            "func-names": string[];
            "lines-between-class-members": (string | {
                exceptAfterSingleLine: boolean;
            })[];
            "max-depth": string;
            "max-nested-callbacks": (string | number)[];
            "max-params": (string | {
                max: number;
            })[];
            "max-statements-per-line": string;
            "no-array-constructor": string;
            "no-lonely-if": string;
            "no-multi-assign": string;
            "no-negated-condition": string;
            "no-new-object": string;
            "no-restricted-syntax": string[];
            "no-unneeded-ternary": string;
            "one-var": string[];
            "operator-assignment": string[];
            "padding-line-between-statements": string;
            "prefer-exponentiation-operator": string;
            "spaced-comment": (string | {
                line: {
                    exceptions: string[];
                    markers: string[];
                };
                block: {
                    exceptions: string[];
                    markers: string[];
                    balanced: boolean;
                };
            })[];
            "constructor-super": string;
            "no-class-assign": string;
            "no-const-assign": string;
            "no-dupe-class-members": string;
            "no-new-symbol": string;
            "no-this-before-super": string;
            "no-useless-computed-key": (string | {
                enforceForClassMembers: boolean;
            })[];
            "no-useless-constructor": string;
            "no-useless-rename": string;
            "require-yield": string;
            "symbol-description": string;
            "no-var": string;
            "object-shorthand": string[];
            "prefer-arrow-callback": (string | {
                allowNamedFunctions: boolean;
            })[];
            "prefer-const": (string | {
                destructuring: string;
            })[];
            "prefer-numeric-literals": string;
            "prefer-rest-params": string;
            "prefer-spread": string;
            "prefer-object-spread": string;
            "prefer-destructuring": (string | {
                VariableDeclarator: {
                    array: boolean;
                    object: boolean;
                };
                AssignmentExpression: {
                    array: boolean;
                    object: boolean;
                };
                enforceForRenamedProperties?: undefined;
            } | {
                enforceForRenamedProperties: boolean;
                VariableDeclarator?: undefined;
                AssignmentExpression?: undefined;
            })[];
            "no-useless-catch": string;
            "react/boolean-prop-naming": (string | {
                validateNested: boolean;
            })[];
            "react/button-has-type": string;
            "react/default-props-match-prop-types": string;
            "react/function-component-definition": (string | {
                namedComponents: string;
                unnamedComponents: string;
            })[];
            "react/no-access-state-in-setstate": string;
            "react/no-children-prop": string;
            "react/no-danger": string;
            "react/no-danger-with-children": string;
            "react/no-deprecated": string;
            "react/no-did-update-set-state": string;
            "react/no-direct-mutation-state": string;
            "react/no-find-dom-node": string;
            "react/no-is-mounted": string;
            "react/no-redundant-should-component-update": string;
            "react/no-render-return-value": string;
            "react/no-typos": string;
            "react/no-string-refs": (string | {
                noTemplateLiterals: boolean;
            })[];
            "react/no-this-in-sfc": string;
            "react/no-unescaped-entities": string;
            "react/no-unknown-property": string;
            "react/no-unsafe": string;
            "react/no-unused-prop-types": string;
            "react/no-unused-state": string;
            "react/prefer-read-only-props": string;
            "react/require-default-props": (string | {
                forbidDefaultForRequired: boolean;
                ignoreFunctionalComponents: boolean;
            })[];
            "react/self-closing-comp": string;
            "react/state-in-constructor": string[];
            "react/static-property-placement": string;
            "react/style-prop-object": string;
            "react/void-dom-elements-no-children": string;
            "react/jsx-boolean-value": string;
            "react/jsx-no-bind": (string | {
                allowArrowFunctions: boolean;
            })[];
            "react/jsx-no-comment-textnodes": string;
            "react/jsx-no-duplicate-props": (string | {
                ignoreCase: boolean;
            })[];
            "react/jsx-no-script-url": string;
            "react/jsx-no-undef": string;
            "react/jsx-curly-brace-presence": string[];
            "react/jsx-fragments": string[];
            "react/jsx-pascal-case": string;
            "react/jsx-sort-props": (string | {
                callbacksLast: boolean;
                shorthandFirst: boolean;
                noSortAlphabetically: boolean;
                reservedFirst: boolean;
            })[];
            "react/jsx-uses-react": string;
            "react/jsx-uses-vars": string;
            "react-hooks/rules-of-hooks": string;
            "react-hooks/exhaustive-deps": string;
            "react/jsx-no-constructed-context-values": string;
            "no-console": string;
            "10x/react-in-scope": string;
            "react/react-in-jsx-scope": string;
            "react/jsx-key": string;
            "react/jsx-no-target-blank": string;
            "react/prop-types": string;
        };
    }[];
    rules: {
        "react/jsx-no-useless-fragment": string;
        "react/no-array-index-key": string;
        "10x/auto-import": (string | {
            imports: {
                useRef: string;
                useEffect: string;
                useState: string;
                useCallback: string;
                useMemo: string;
                useReducer: string;
                useCurrentFrame: string;
                useVideoConfig: string;
                spring: string;
                measureSpring: string;
                random: string;
                interpolate: string;
                interpolateColors: string;
                Easing: string;
                getInputProps: string;
                continueRender: string;
                delayRender: string;
                AbsoluteFill: string;
                Sequence: string;
                Composition: string;
                Audio: string;
                Video: string;
                OffthreadVideo: string;
                Series: string;
                Still: string;
                Freeze: string;
                Loop: string;
                staticFile: string;
                Config: string;
                Img: string;
                IFrame: string;
                Folder: string;
                styled: string;
            };
        })[];
        "@typescript-eslint/explicit-module-boundary-types": string;
        "no-unused-vars": string | (string | {
            vars: string;
            args: string;
            ignoreRestSiblings: boolean;
            argsIgnorePattern: string;
            caughtErrors: string;
            caughtErrorsIgnorePattern: string;
        })[];
        "no-undef": string | (string | {
            typeof: boolean;
        })[];
        "no-shadow"?: string | undefined;
        "@typescript-eslint/no-var-requires"?: string | undefined;
        curly: number;
        "lines-around-comment": number;
        "max-len": number;
        "no-confusing-arrow": number;
        "no-mixed-operators": number;
        "no-tabs": number;
        "no-unexpected-multiline": number;
        quotes: number;
        "@typescript-eslint/quotes": number;
        "babel/quotes": number;
        "array-bracket-newline": string;
        "array-bracket-spacing": string;
        "array-element-newline": string;
        "arrow-parens": string;
        "arrow-spacing": string;
        "block-spacing": string;
        "brace-style": string;
        "comma-dangle": string;
        "comma-spacing": string;
        "comma-style": string;
        "computed-property-spacing": string;
        "dot-location": string;
        "eol-last": string;
        "func-call-spacing": string;
        "function-call-argument-newline": string;
        "function-paren-newline": string;
        "generator-star": string;
        "generator-star-spacing": string;
        "implicit-arrow-linebreak": string;
        indent: string;
        "jsx-quotes": string;
        "key-spacing": string;
        "keyword-spacing": string;
        "linebreak-style": string;
        "multiline-ternary": string;
        "newline-per-chained-call": string;
        "new-parens": string;
        "no-arrow-condition": string;
        "no-comma-dangle": string;
        "no-extra-parens": string;
        "no-extra-semi": string;
        "no-floating-decimal": string;
        "no-mixed-spaces-and-tabs": string;
        "no-multi-spaces": string;
        "no-multiple-empty-lines": string;
        "no-reserved-keys": string;
        "no-space-before-semi": string;
        "no-trailing-spaces": string;
        "no-whitespace-before-property": string;
        "no-wrap-func": string;
        "nonblock-statement-body-position": string;
        "object-curly-newline": string;
        "object-curly-spacing": string;
        "object-property-newline": string;
        "one-var-declaration-per-line": string;
        "operator-linebreak": string;
        "padded-blocks": string;
        "quote-props": string;
        "rest-spread-spacing": string;
        semi: string;
        "semi-spacing": string;
        "semi-style": string;
        "space-after-function-name": string;
        "space-after-keywords": string;
        "space-before-blocks": string;
        "space-before-function-paren": string;
        "space-before-function-parentheses": string;
        "space-before-keywords": string;
        "space-in-brackets": string;
        "space-in-parens": string;
        "space-infix-ops": string;
        "space-return-throw-case": string;
        "space-unary-ops": string;
        "space-unary-word-ops": string;
        "switch-colon-spacing": string;
        "template-curly-spacing": string;
        "template-tag-spacing": string;
        "unicode-bom": string;
        "wrap-iife": string;
        "wrap-regex": string;
        "yield-star-spacing": string;
        "@babel/object-curly-spacing": string;
        "@babel/semi": string;
        "@typescript-eslint/brace-style": string;
        "@typescript-eslint/comma-dangle": string;
        "@typescript-eslint/comma-spacing": string;
        "@typescript-eslint/func-call-spacing": string;
        "@typescript-eslint/indent": string;
        "@typescript-eslint/keyword-spacing": string;
        "@typescript-eslint/member-delimiter-style": string;
        "@typescript-eslint/no-extra-parens": string;
        "@typescript-eslint/no-extra-semi": string;
        "@typescript-eslint/object-curly-spacing": string;
        "@typescript-eslint/semi": string;
        "@typescript-eslint/space-before-function-paren": string;
        "@typescript-eslint/space-infix-ops": string;
        "@typescript-eslint/type-annotation-spacing": string;
        "babel/object-curly-spacing": string;
        "babel/semi": string;
        "flowtype/boolean-style": string;
        "flowtype/delimiter-dangle": string;
        "flowtype/generic-spacing": string;
        "flowtype/object-type-curly-spacing": string;
        "flowtype/object-type-delimiter": string;
        "flowtype/quotes": string;
        "flowtype/semi": string;
        "flowtype/space-after-type-colon": string;
        "flowtype/space-before-generic-bracket": string;
        "flowtype/space-before-type-colon": string;
        "flowtype/union-intersection-spacing": string;
        "react/jsx-child-element-spacing": string;
        "react/jsx-closing-bracket-location": string;
        "react/jsx-closing-tag-location": string;
        "react/jsx-curly-newline": string;
        "react/jsx-curly-spacing": string;
        "react/jsx-equals-spacing": string;
        "react/jsx-first-prop-new-line": string;
        "react/jsx-indent": string;
        "react/jsx-indent-props": string;
        "react/jsx-max-props-per-line": string;
        "react/jsx-newline": string;
        "react/jsx-one-expression-per-line": string;
        "react/jsx-props-no-multi-spaces": string;
        "react/jsx-tag-spacing": string;
        "react/jsx-wrap-multilines": string;
        "for-direction": string;
        "getter-return": string;
        "no-async-promise-executor": string;
        "no-compare-neg-zero": string;
        "no-cond-assign": string;
        "no-constant-condition": string;
        "no-control-regex": string;
        "no-debugger": string;
        "no-dupe-args": string;
        "no-dupe-else-if": string;
        "no-dupe-keys": string;
        "no-duplicate-case": string;
        "no-empty-character-class": string;
        "no-empty": (string | {
            allowEmptyCatch: boolean;
        })[];
        "no-ex-assign": string;
        "no-extra-boolean-cast": string;
        "no-func-assign": string;
        "no-import-assign": string;
        "no-inner-declarations": string;
        "no-invalid-regexp": string;
        "no-irregular-whitespace": string;
        "no-loss-of-precision": string;
        "no-misleading-character-class": string;
        "no-obj-calls": string;
        "no-promise-executor-return": string;
        "no-prototype-builtins": string;
        "no-regex-spaces": string;
        "no-setter-return": string;
        "no-sparse-arrays": string;
        "no-template-curly-in-string": string;
        "no-unreachable": string;
        "no-unreachable-loop": string;
        "no-unsafe-finally": string;
        "no-unsafe-negation": string;
        "no-unsafe-optional-chaining": (string | {
            disallowArithmeticOperators: boolean;
        })[];
        "no-useless-backreference": string;
        "use-isnan": string;
        "valid-typeof": (string | {
            requireStringLiterals: boolean;
        })[];
        "accessor-pairs": (string | {
            enforceForClassMembers: boolean;
        })[];
        "array-callback-return": (string | {
            allowImplicit: boolean;
        })[];
        "block-scoped-var": string;
        complexity: string;
        "default-case": string;
        "default-case-last": string;
        "default-param-last": string;
        "dot-notation": string;
        eqeqeq: string;
        "grouped-accessor-pairs": string[];
        "guard-for-in": string;
        "no-alert": string;
        "no-caller": string;
        "no-case-declarations": string;
        "no-constructor-return": string;
        "no-else-return": (string | {
            allowElseIf: boolean;
        })[];
        "no-empty-pattern": string;
        "no-eq-null": string;
        "no-eval": string;
        "no-extend-native": string;
        "no-extra-bind": string;
        "no-extra-label": string;
        "no-fallthrough": string;
        "no-global-assign": string;
        "no-implicit-coercion": string;
        "no-implicit-globals": string;
        "no-implied-eval": string;
        "no-iterator": string;
        "no-labels": string;
        "no-lone-blocks": string;
        "no-multi-str": string;
        "no-new-func": string;
        "no-new-wrappers": string;
        "no-nonoctal-decimal-escape": string;
        "no-new": string;
        "no-octal-escape": string;
        "no-octal": string;
        "no-proto": string;
        "no-redeclare": string;
        "no-return-assign": string[];
        "no-return-await": string;
        "no-script-url": string;
        "no-self-assign": (string | {
            props: boolean;
        })[];
        "no-self-compare": string;
        "no-sequences": string;
        "no-throw-literal": string;
        "no-unmodified-loop-condition": string;
        "no-unused-labels": string;
        "no-useless-call": string;
        "no-useless-concat": string;
        "no-useless-escape": string;
        "no-useless-return": string;
        "no-void": string;
        "no-warning-comments": string;
        "no-with": string;
        "prefer-promise-reject-errors": (string | {
            allowEmptyReject: boolean;
        })[];
        "prefer-regex-literals": string;
        radix: string;
        yoda: string;
        "no-delete-var": string;
        "no-label-var": string;
        "no-restricted-globals": string[];
        "no-shadow-restricted-names": string;
        "no-undef-init": string;
        "no-buffer-constructor": string;
        "no-restricted-imports": string[];
        camelcase: (string | {
            properties: string;
        })[];
        "capitalized-comments": (string | {
            ignorePattern: string;
            ignoreInlineComments: boolean;
            ignoreConsecutiveComments: boolean;
        })[];
        "func-name-matching": (string | {
            considerPropertyDescriptor: boolean;
        })[];
        "func-names": string[];
        "lines-between-class-members": (string | {
            exceptAfterSingleLine: boolean;
        })[];
        "max-depth": string;
        "max-nested-callbacks": (string | number)[];
        "max-params": (string | {
            max: number;
        })[];
        "max-statements-per-line": string;
        "no-array-constructor": string;
        "no-lonely-if": string;
        "no-multi-assign": string;
        "no-negated-condition": string;
        "no-new-object": string;
        "no-restricted-syntax": string[];
        "no-unneeded-ternary": string;
        "one-var": string[];
        "operator-assignment": string[];
        "padding-line-between-statements": string;
        "prefer-exponentiation-operator": string;
        "spaced-comment": (string | {
            line: {
                exceptions: string[];
                markers: string[];
            };
            block: {
                exceptions: string[];
                markers: string[];
                balanced: boolean;
            };
        })[];
        "constructor-super": string;
        "no-class-assign": string;
        "no-const-assign": string;
        "no-dupe-class-members": string;
        "no-new-symbol": string;
        "no-this-before-super": string;
        "no-useless-computed-key": (string | {
            enforceForClassMembers: boolean;
        })[];
        "no-useless-constructor": string;
        "no-useless-rename": string;
        "require-yield": string;
        "symbol-description": string;
        "no-var": string;
        "object-shorthand": string[];
        "prefer-arrow-callback": (string | {
            allowNamedFunctions: boolean;
        })[];
        "prefer-const": (string | {
            destructuring: string;
        })[];
        "prefer-numeric-literals": string;
        "prefer-rest-params": string;
        "prefer-spread": string;
        "prefer-object-spread": string;
        "prefer-destructuring": (string | {
            VariableDeclarator: {
                array: boolean;
                object: boolean;
            };
            AssignmentExpression: {
                array: boolean;
                object: boolean;
            };
            enforceForRenamedProperties?: undefined;
        } | {
            enforceForRenamedProperties: boolean;
            VariableDeclarator?: undefined;
            AssignmentExpression?: undefined;
        })[];
        "no-useless-catch": string;
        "react/boolean-prop-naming": (string | {
            validateNested: boolean;
        })[];
        "react/button-has-type": string;
        "react/default-props-match-prop-types": string;
        "react/function-component-definition": (string | {
            namedComponents: string;
            unnamedComponents: string;
        })[];
        "react/no-access-state-in-setstate": string;
        "react/no-children-prop": string;
        "react/no-danger": string;
        "react/no-danger-with-children": string;
        "react/no-deprecated": string;
        "react/no-did-update-set-state": string;
        "react/no-direct-mutation-state": string;
        "react/no-find-dom-node": string;
        "react/no-is-mounted": string;
        "react/no-redundant-should-component-update": string;
        "react/no-render-return-value": string;
        "react/no-typos": string;
        "react/no-string-refs": (string | {
            noTemplateLiterals: boolean;
        })[];
        "react/no-this-in-sfc": string;
        "react/no-unescaped-entities": string;
        "react/no-unknown-property": string;
        "react/no-unsafe": string;
        "react/no-unused-prop-types": string;
        "react/no-unused-state": string;
        "react/prefer-read-only-props": string;
        "react/require-default-props": (string | {
            forbidDefaultForRequired: boolean;
            ignoreFunctionalComponents: boolean;
        })[];
        "react/self-closing-comp": string;
        "react/state-in-constructor": string[];
        "react/static-property-placement": string;
        "react/style-prop-object": string;
        "react/void-dom-elements-no-children": string;
        "react/jsx-boolean-value": string;
        "react/jsx-no-bind": (string | {
            allowArrowFunctions: boolean;
        })[];
        "react/jsx-no-comment-textnodes": string;
        "react/jsx-no-duplicate-props": (string | {
            ignoreCase: boolean;
        })[];
        "react/jsx-no-script-url": string;
        "react/jsx-no-undef": string;
        "react/jsx-curly-brace-presence": string[];
        "react/jsx-fragments": string[];
        "react/jsx-pascal-case": string;
        "react/jsx-sort-props": (string | {
            callbacksLast: boolean;
            shorthandFirst: boolean;
            noSortAlphabetically: boolean;
            reservedFirst: boolean;
        })[];
        "react/jsx-uses-react": string;
        "react/jsx-uses-vars": string;
        "react-hooks/rules-of-hooks": string;
        "react-hooks/exhaustive-deps": string;
        "react/jsx-no-constructed-context-values": string;
        "no-console": string;
        "10x/react-in-scope": string;
        "react/react-in-jsx-scope": string;
        "react/jsx-key": string;
        "react/jsx-no-target-blank": string;
        "react/prop-types": string;
    };
    settings: {
        react: {
            version: string;
        };
    };
};
export = _default;
