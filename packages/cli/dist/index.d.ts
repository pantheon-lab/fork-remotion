/// <reference types="minimist" />
export declare const cli: () => Promise<void>;
export * from './render';
export declare const CliInternals: {
    createOverwriteableCliOutput: (quiet: boolean) => {
        update: (up: string) => boolean;
    };
    chalk: {
        enabled: boolean;
        visible: boolean;
        styles: Record<string, {
            codes: [number, number];
            name: string;
            wrap?: ((input: string, newline: boolean) => string) | undefined;
        }>;
        keys: Record<string, string[]>;
        alias?: ((name: string, col: string) => void) | undefined;
    } & {
        reset: (str: string) => string;
        bold: (str: string) => string;
        dim: (str: string) => string;
        italic: (str: string) => string;
        underline: (str: string) => string;
        inverse: (str: string) => string;
        hidden: (str: string) => string;
        strikethrough: (str: string) => string;
        black: (str: string) => string;
        red: (str: string) => string;
        green: (str: string) => string;
        yellow: (str: string) => string;
        blue: (str: string) => string;
        magenta: (str: string) => string;
        cyan: (str: string) => string;
        white: (str: string) => string;
        gray: (str: string) => string;
        bgBlack: (str: string) => string;
        bgRed: (str: string) => string;
        bgGreen: (str: string) => string;
        bgYellow: (str: string) => string;
        bgBlue: (str: string) => string;
        bgMagenta: (str: string) => string;
        bgCyan: (str: string) => string;
        bgWhite: (str: string) => string;
        blackBright: (str: string) => string;
        redBright: (str: string) => string;
        greenBright: (str: string) => string;
        yellowBright: (str: string) => string;
        blueBright: (str: string) => string;
        magentaBright: (str: string) => string;
        cyanBright: (str: string) => string;
        whiteBright: (str: string) => string;
        bgBlackBright: (str: string) => string;
        bgRedBright: (str: string) => string;
        bgGreenBright: (str: string) => string;
        bgYellowBright: (str: string) => string;
        bgBlueBright: (str: string) => string;
        bgMagentaBright: (str: string) => string;
        bgCyanBright: (str: string) => string;
        bgWhiteBright: (str: string) => string;
    };
    makeProgressBar: (percentage: number) => string;
    Log: {
        verbose: (message?: any, ...optionalParams: any[]) => void;
        info: (message?: any, ...optionalParams: any[]) => void;
        warn: (message?: any, ...optionalParams: any[]) => void;
        error: (message?: any, ...optionalParams: any[]) => void;
    };
    loadConfigFile: (configFileName: string, isJavascript: boolean) => Promise<string | null>;
    getCliOptions: (options: {
        isLambda: boolean;
        type: "still" | "series" | "get-compositions";
    }) => Promise<{
        puppeteerTimeout: number;
        parallelism: number | null;
        frameRange: import("remotion").FrameRange | null;
        shouldOutputImageSequence: boolean;
        codec: "h264" | "h265" | "vp8" | "vp9" | "mp3" | "aac" | "wav" | "prores" | "h264-mkv" | "gif";
        overwrite: boolean;
        inputProps: object;
        envVariables: Record<string, string>;
        quality: number | undefined;
        absoluteOutputFile: string | null;
        browser: import("remotion").Browser;
        crf: number | null;
        pixelFormat: "yuv420p" | "yuva420p" | "yuv422p" | "yuv444p" | "yuv420p10le" | "yuv422p10le" | "yuv444p10le" | "yuva444p10le";
        imageFormat: "png" | "jpeg" | "none";
        proResProfile: "4444-xq" | "4444" | "hq" | "standard" | "light" | "proxy" | undefined;
        everyNthFrame: number;
        numberOfGifLoops: number | null;
        stillFrame: number;
        browserExecutable: import("remotion").BrowserExecutable;
        ffmpegExecutable: import("remotion").FfmpegExecutable;
        ffprobeExecutable: import("remotion").FfmpegExecutable;
        logLevel: "verbose" | "info" | "warn" | "error";
        scale: number;
        chromiumOptions: import("@remotion/renderer").ChromiumOptions;
        port: number | null;
    }>;
    parseCommandLine: (type: "sequence" | "still" | "lambda" | "preview" | "versions") => void;
    loadConfig: () => Promise<string | null>;
    initializeRenderCli: (type: "sequence" | "still" | "lambda" | "preview") => Promise<void>;
    BooleanFlags: string[];
    quietFlagProvided: () => boolean;
    parsedCli: import("./parse-command-line").CommandLineOptions & import("minimist").ParsedArgs;
    handleCommonError: (err: Error) => Promise<void>;
    formatBytes: (number: number, options?: Intl.NumberFormatOptions & {
        locale: string;
        bits?: boolean | undefined;
        binary?: boolean | undefined;
        signed: boolean;
    }) => string;
    getFileSizeDownloadBar: (downloaded: number) => string;
};
